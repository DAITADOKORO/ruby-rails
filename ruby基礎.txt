ruby基礎

1.用語集
	メソッド（関数）　処理をさせる命令。
				　およびオブジェクトが持つ固有の機能や処理
	オブジェクト　rubyで扱う全データのまとまりのこと。
			　データとメソッドをひとまとめにしたもの。
	string 文字列型 ""で囲ったもの
	integer 整数型
	変数　作成したオブジェクトにつける名札
		　変数名 = 入れたいデータ
		　小文字で始まり、数字を使うことはできない。
		　グローバル変数、ローカル変数、インスタンス変数、クラス変数などなど
	定数　変更しないことが保証されたデータにつける名札
		　大文字で始まり、後から書き換えることができない。
	引数　メソッドを呼び出す際、メソッドに渡す値。
		　メソッド名（引数）と記述。
	戻り値　メソッドが呼ばれたときに返ってくる値。
	　　　　def~end処理内の最終結果。
	　　　　returnで指定すれば最終結果を変更することも可。


2.オブジェクトの種類
　数値
	メソッド各種
	　+ - * / %
	例）puts 100 + 5
　文字列
	''か""どちらかで囲む
	例）puts "こんにちは#{name}さん"
	　#{変数}で{}内の変数の値を展開
　配列
	どんなオブジェクトでも代入可。
	同じ配列の要素に異なった種類のオブジェクトを代入することも可
	データ型不問。文字列でも数値でも。
	例）names = ["a","b","c"]
	　　puts names[1]
		結果：　b　（開始番号0のため）
　ハッシュ
	キーと値をセットで保存できるデータの集合。
	例）tall ={"太郎"=>180, "次郎"=>170}
	    puts tall["太郎"]
	    結果：　180
　シンボル
	''や""の代わりに:を使うことで、文字列と同様に扱える
	例）tall = {:太郎=>180, :次郎=>170}
		puts tall[:次郎]
3.メソッド各種
　	.to_s　数字から文字へ変換
	.to_i　文字から数字へ変換 getsで得た文字列を変換するときなどに。
	.reverse　文字列反転
	gets  キーボード入力された値を取得
	rand(1..6)　1~6をランダム表示

4.if文
　条件処理
	　if 条件
		処理
	　elsif 追加条件
		処理
	　else #ifが当てはまらない場合適応
		処理
	　end

　比較演算子
	< <= > >= == != ノットイコール
　論理演算子
　　! 否定 && アンド条件　||　or条件
	　if tall >= 170 && <= 190
		puts "身長は170以上190以下です"
	  end

5.while文
　繰り返し処理
　条件指定の場合に使う
	while 条件 do
		処理
	end

6.for文
　繰り返し処理第二弾
　オブジェクト指定の場合に使う
	for 変数 in （範囲・ハッシュ・配列などを指定） do
	　処理
	end

7.eachメソッド
　繰り返し処理第三弾
　オブジェクト内の要素を順に取り出す場合に使う
　（範囲・ハッシュ・配列などを指定） .each do |変数|
	　処理
	end
	例）{"apple"=>130, "strawberry"=>180, "orange"=>100}.each do |fruit, price| #ハッシュの内容を順にキーをfruit、値をpriceに代入して繰り返す
	 puts "#{fruit}は#{price}円です。" #変数展開
	end

8.break
　繰り返し処理の中断
i = 0
while i <= 10 do
 if i >5
   break #iが5より大きくなると繰り返しから抜ける
 end
 puts i
 i += 1
end

9.メソッドの定義
　def メソッド名（引数）
　　処理
　end
def greeting(name)
  "Hello, #{name}!" # nameの中には、文字列'John'が入っている
end 
 
puts greeting('John') # ここでは'John'を引数として渡している

10.変数

クラス変数
　同じクラスから作成されたインスタンスごとに共通する値

インスタンス変数
　インスタンスごとに別々の値を保持することのできる変数
　クラス内で全メソッドで共通して使用できる。
　どこかのメソッドで使用された時点で作成され、他のメソッドでも使える。
　ただし、クラスにメソッドを定義する必要あり。
　@変数

ローカル変数
　アクション内、そのメソッド内のみで利用できる変数。
　不要な受け渡しで不具合を起こさないために使う。

11.rubyのタグ

<% %>タグ内の結果が画面に表示されずに処理される
<%= %>タグ内の結果が画面に表示される