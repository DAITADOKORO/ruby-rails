ページの表示

Model-アプリケーション固有のデータを扱う部分
View-PCの画面にかかわる部分


Controller-ModelやViewを統合的に制御する部分
	ユーザーがurlにアクセスしたときにリクエストを最初に受け取る。
		→リクエストを元に、Modelからのデータを対応するViewに渡して表示。
		：具体的な制御：
			・Modelとのやり取り
			・Viewに渡すインスタンス変数を定義
			・表示するViewファイルを指定


１．コントローラの作成

$ rails g controller コントローラ名

　＊コントローラの命名規則
　　コントローラ名　　　：先頭小文字、複数形　例）roots
　　コントローラのクラス名：先頭大文字、複数形　例）RootsController
	ファイル名　　　　：先頭小文字、複数形　例）roots_controller.rb

　＊間違えた場合
$ rails d controller 間違えたコントローラ名

2.コントローラにアクションを追加

＝アクションとは＝
コントローラに定義されている処理内容の一つで、ユーザーが実際に呼び出して使う。
コントローラ：全体の統括制御
アクション：制御内の一つ一つの処理を担当

1)コントローラのファイルを開く
app-controllers-____controller.rb

2)topアクションを定義
	def top
	end

3)routingの設定

＝roitingとは＝
特定のurlにアクセスしたときに、どのコントローラのどのアクションに処理を振り分けるかを定義する。
urlとアクションを結びつける。

congig-routes.rb

get 'top' => '____#top'

HTTPメソッド 'url' => 'コントローラ#アクション'

＝HTTPメソッドとは＝
Hypertext Transfer Protocolーー通信規約（プロトコル）の一種
ユーザーが行いたい処理（HTTPリクエスト）をサーバーに伝える役割を担う。
このHTTPリクエストの際に、通信のやり取りの要求を定義したものがHTTPメソッドとなる。
GET：リソース（Webページなど）の取得
POST：リソースの更新・データ追加
DELETE：リソースの削除

3.対応するViewファイルの作成

app/views/コントローラ名

Viewファイルの名前は、アクション名と同じにするルールがある。
よって今回は、viewsまで移動したら新規ファイル作成、

top.html.erb
で保存
